<?php
/**
 * Copyright (c) 2009-2020 Laposa Limited (https://laposa.ie)
 * Licensed under the New BSD License. See the file LICENSE.txt for details.
 *
 */

use Symfony\Component\Mailer\Transport;
use Symfony\Component\Mailer\Mailer;
use Symfony\Component\Mime\Address;
use Symfony\Component\Mime\Email;

class common_email extends Onyx_Model {
    public $id;
    public $email_from;
    public $name_from;
    public $subject;
    public $content;
    public $email_recipient;
    public $name_recipient;
    public $template;
    public $created;
    public $ip;
    public $_form_data_valid;

    public $_metaData = [
        'id'              => ['label' => 'ID', 'validation' => 'int', 'required' => true],
        'email_from'      => ['label' => '', 'validation' => 'email', 'required' => true],
        'name_from'       => ['label' => '', 'validation' => 'string', 'required' => true],
        'subject'         => ['label' => '', 'validation' => 'string', 'required' => true],
        'content'         => ['label' => '', 'validation' => 'string', 'required' => true],
        'template'        => ['label' => '', 'validation' => 'string', 'required' => true],
        'email_recipient' => ['label' => '', 'validation' => 'email', 'required' => true],
        'name_recipient'  => ['label' => '', 'validation' => 'string', 'required' => true],
        'created'         => ['label' => '', 'validation' => 'datetime', 'required' => true],
        'ip'              => ['label' => '', 'validation' => 'string', 'required' => true],
    ];

    /**
     * create table sql
     *
     * @return string SQL command for table creating
     */
    private function getCreateTableSql() {
        $sql = "
CREATE TABLE common_email (
    id serial NOT NULL PRIMARY KEY,
    email_from character varying(255),
    name_from character varying(255),
    subject character varying(255),
    content text,
    template character varying(255),
    email_recipient character varying(255),
    name_recipient character varying(255),
    created timestamp(0) without time zone,
    ip character varying(255)
);
        ";

        return $sql;
    }

    /**
     * init configuration
     *
     * @return array configuration
     */
    static function initConfiguration() {
        if (array_key_exists('common_email', $GLOBALS['onyx_conf'])) $conf = $GLOBALS['onyx_conf']['common_email'];
        else $conf = [];

        // set default values if empty
        // allow sender email address to be overwritten, for example in contact form
        // to allow sending emails on behalf of the customer
        self::setConfDefaults($conf, 'sender_overwrite_allowed', false);
        self::setConfDefaults($conf, 'retention_days', 365);
        // what is default email FROM address?
        self::setConfDefaults($conf, 'mail_sender_address', $GLOBALS['onyx_conf']['global']['admin_email']);
        self::setConfDefaults($conf, 'mail_sender_name', $GLOBALS['onyx_conf']['global']['admin_email_name']);
        // what is default email TO address?
        self::setConfDefaults($conf, 'mail_recipient_address', $GLOBALS['onyx_conf']['global']['admin_email']);
        self::setConfDefaults($conf, 'mail_recipient_name', $GLOBALS['onyx_conf']['global']['admin_email_name']);
        // where to send blind copy of all email generated by the system?
        self::setConfDefaults($conf, 'mail_bcc_address', false);
        self::setConfDefaults($conf, 'mail_bcc_name', false);
        // support for SMTP server defined in env variable
        if (getenv('ONYX_SMTP_SERVER_ADDRESS')) $conf['smtp_server_address'] = getenv('ONYX_SMTP_SERVER_ADDRESS');
        elseif ($conf['smtp_server_address'] == '') $conf['smtp_server_address'] = false;
        if (getenv('ONYX_SMTP_SERVER_PORT')) $conf['smtp_server_port'] = getenv('ONYX_SMTP_SERVER_PORT');
        elseif ($conf['smtp_server_port'] == '') $conf['smtp_server_port'] = 25;
        if (getenv('ONYX_SMTP_SERVER_USERNAME')) $conf['smtp_server_username'] = getenv('ONYX_SMTP_SERVER_USERNAME');
        elseif ($conf['smtp_server_username'] == '') $conf['smtp_server_username'] = false;
        if (getenv('ONYX_SMTP_SERVER_PASSWORD')) $conf['smtp_server_password'] = getenv('ONYX_SMTP_SERVER_PASSWORD');
        elseif ($conf['smtp_server_password'] == '') $conf['smtp_server_password'] = false;
        return $conf;
    }

    /**
     * explore form data
     *
     * @param array $items item list
     * @return string formated text message
     */
    function exploreFormData($items) {
        $this->_form_data_valid = [];

        $content = '';
        if (count($items) > 0) {
            //check for require items and creating of message
            foreach ($items as $key => $val) {
                if (preg_match('/required/', $key) && trim($val) == "") {
                    $key = $this->_formatKey($key);
                    msg("Missing: $key", 'error');
                    $this->setFormDataValid($key, false);
                }

                $key = $this->_formatKey($key);

                // the set() is stripping \n
                if ($key == 'Message') {
                    $c = "<br />$key:\n$val<br />";
                } else {
                    $c = "$key: $val";
                }

                $c = "\n$c";
                $content = $content . $c;
            }

            if ($this->getFormDataValid()) $this->setValid('content', true);
            else $this->setValid('content', false);
        }

        return $content;
    }

    /**
     * get valid
     *
     * @return boolean form validation state
     */
    function getFormDataValid() {
        if (is_array($this->_form_data_valid)) {
            if (in_array(false, $this->_form_data_valid)) return false;
            else return true;
        } else return false;
    }

    /**
     * set valid
     *
     * @param string $key item key name
     * @param string $value item value
     */
    function setFormDataValid($key, $value) {
        $this->_form_data_valid[$key] = $value;
        //print_r($this->_valid);
    }

    /**
     * format key
     * @param string $key item key name
     * @return string
     */
    function _formatKey(string $key) {
        $key = preg_replace("/required_/", "", $key);
        $key = preg_replace("/_/", " ", $key);
        $key = ucfirst($key);
        return $key;
    }

    /**
     * send e-mail
     *
     * @param string $template template file name
     * @param string $content message content
     * @param string $email_recipient recipient e-mail address
     * @param string $name_recipient recipient display name
     * @param string $email_from sender e-mail address
     * @param string $name_from sender display name
     * @return boolean send status
     */
    function sendEmail($template = 'default', $content = 'n/a', $email_recipient = false, $name_recipient = false, $email_from = false, $name_from = false) {
        if (!$email_recipient) $email_recipient = $this->conf['mail_recipient_address'];
        if (!$name_recipient) $name_recipient = $this->conf['mail_recipient_name'];
        if (!$email_from) $email_from = $this->conf['mail_sender_address'];
        if (!$name_from) $name_from = $this->conf['mail_sender_name'];

        $email_data = [];
        $email_data['content'] = $content;
        $email_data['email_from'] = $email_from;
        $email_data['name_from'] = $name_from;
        $email_data['template'] = $template;
        $email_data['email_recipient'] = $email_recipient;
        $email_data['name_recipient'] = $name_recipient;
        $email_data['created'] = date('c');
        $email_data['ip'] = $_SERVER['REMOTE_ADDR'];

        //temp
        $this->set('content', $email_data['content']);
        $this->set('email_from', $email_data['email_from']);
        $this->set('name_from', $email_data['name_from']);
        $this->set('template', $email_data['template']);
        $this->set('email_recipient', $email_data['email_recipient']);
        $this->set('name_recipient', $email_data['name_recipient']);
        $this->set('created', $email_data['created']);
        $this->set('ip', $email_data['ip']);

        //$this->setAll($email_data);

        if ($this->getValid()) {
            if ($this->send()) {
                //temp
                $email_data['subject'] = $this->get('subject');

                // save to db if email retention is more than 0 days
                if (is_numeric($this->conf['retention_days']) > 0) {
                    if ($this->insert($email_data)) {
                        return true;
                    } else {
                        msg("Can't insert email record into the database", "error", 1);
                    }
                }
            } else {
                //TODO: notify admin
                msg("Can't send email using mail->send()", "error");
            }
        }

        return false;
    }

    /**
     * send internal function
     *
     * @return boolean send status
     */
    function send() {
        // delete old emails first - consider move it to a garbage collector together with session gc
        $this->deleteOldEmails();

        $emailData = $this->_format($this->template);
        $this->set('subject', $emailData['title']);

        $mail = (new Email())
            ->from(new Address($this->get('email_from'), $this->get('name_from')))
            ->addTo(new Address($this->get('email_recipient'), $this->get('name_recipient')))
            ->subject($this->get('subject'));

        //send BCC of all emails to specified address
        if ($this->conf['mail_bcc_address']) $mail->addBcc(new Address($this->conf['mail_bcc_address'], $this->conf['mail_bcc_name']));

        // configure mailer transport
        if ($this->conf['smtp_server_address']) {
            msg("use SMTP {$this->conf['smtp_server_address']}:{$this->conf['smtp_server_port']}", 'ok', 2);

            $dsn = "{$this->conf['smtp_server_address']}:{$this->conf['smtp_server_port']}";
            if ($this->conf['smtp_server_username'] && $this->conf['smtp_server_password']) {
                msg('using SMTP auth', 'ok', 2);
                $dsn = "{$this->conf['smtp_server_username']}:{$this->conf['smtp_server_port']}@{$dsn}";
            }

            $transport = Transport::fromDsn("smtp://{$dsn}");
        } else {
            msg('use internal mail()', 'ok', 2);
            $transport = Transport::fromDsn('sendmail://default');
        }

        $mailer = new Mailer($transport);

        // attachment(s) via upload
        if (count($_FILES) > 0) {
            foreach ($_FILES as $key => $file) {
                if (is_uploaded_file($file['tmp_name'])) {

                    require_once('models/common/common_file.php');
                    //getSingleUpload could be static method
                    $CommonFile = new common_file();
                    $upload = $CommonFile->getSingleUpload($file, 'var/tmp/', true);

                    // array indicated the same file name already exists in the var/tmp/ folder
                    // we can ignore it, as the previous attachement was overwritten
                    // FIXME: could be a problem when more users submit the same filename in the same time
                    // perhaps saving file with PHP session id or not saving in var/tmp would help
                    if (is_array($upload)) {
                        $attachmentSavedFile = ONYX_PROJECT_DIR . $upload['temp_file'];
                    } else {
                        $attachmentSavedFile = ONYX_PROJECT_DIR . $upload;
                    }

                    // check if file exists and than add to email as attachment
                    if (file_exists($attachmentSavedFile)) {
                        $attachmentInfo = $CommonFile->getFileInfo($attachmentSavedFile);
                        $mail->attachFromPath($attachmentSavedFile, $attachmentInfo['filename']);
                    }
                }
            }
        }

        // quick hack to add attachment functionality, curently used only in gift_voucher_generate
        if (is_array($GLOBALS['onyx_atachments']) && count($GLOBALS['onyx_atachments']) > 0) {
            foreach ($GLOBALS['onyx_atachments'] as $file) {
                if (file_exists($file)) {
                    require_once('models/common/common_file.php');
                    $CommonFile = new common_file();

                    $attachmentInfo = $CommonFile->getFileInfo($file);
                    $mail->attachFromPath($file, $attachmentInfo['filename']);
                }
            }
        }

        // set html & alternative text
        $mail->text($emailData['content']['txt']);
        $mail->html($emailData['content']['html']);

        // try to send the email
        $emailSent = false;
        try {
            $mailer->send($mail);
            $emailSent = true;
        } catch (Throwable $e) {
            msg($e->getMessage(), 'error', 1);
        }

        // return status
        if ($emailSent) {
            msg("The email to {$this->email_recipient} has been sent successfully.", 'ok', 2);
            if (file_exists($attachmentSavedFile)) unlink($attachmentSavedFile);
            return true;
        } else {
            msg('The email was not sent! Some problem with email sending.', 'error');
            return false;
        }
    }

    /**
     * format a message
     *
     * @param string $template message template file name
     * @return array formated message data
     */
    function _format($template) {
        $orig = $this->get('content');

        $this->content = nl2br($this->get('content'));
        $tpl = new XTemplate("$template.html", getTemplateDir("$template.html", 'mail/'));

        $vars = get_object_vars($this);
        $tpl->assign('EMAIL', $vars);

        //read passed data
        if (is_array($GLOBALS['common_email'])) {
            $tpl->assign('DATA', $GLOBALS['common_email']);
        }

        // from $Onyx_Request->_initTemplateVariables
        if ($_SERVER['SSL_PROTOCOL'] || $_SERVER['HTTPS']) $protocol = 'https';
        else $protocol = 'http';

        $tpl->assign('PROTOCOL', $protocol);
        $tpl->assign('URI', "$protocol://{$_SERVER['SERVER_NAME']}{$_SERVER['REQUEST_URI']}");
        $tpl->assign('_SERVER', $_SERVER);
        $tpl->assign('_SESSION', $_SESSION);
        $tpl->assign('CONFIGURATION', $GLOBALS['onyx_conf']);
        $tpl->assign('_POST', $_POST);
        $tpl->assign('_GET', $_GET);
        // assign also to GET variable to keep consistent with normal templates initiated via a controller
        $tpl->assign('GET', $_GET);
        $tpl->assign('TIME', time());

        // include node configuration
        require_once('models/common/common_node.php');
        $node_conf = common_node::initConfiguration();
        $tpl->assign('NODE_CONF', $node_conf);

        // parse
        $tpl->parse('title');
        $tpl->parse('content');

        $this->content = $orig;

        $data['title'] = $tpl->text('title');
        $data['content']['html'] = $tpl->text('content');

        //get the text version
        $data['content']['txt'] = html2text($data['content']['html']);

        //convert relative links to absolute
        $data['content']['html'] = $this->rel2abs("http://{$_SERVER['HTTP_HOST']}", $data['content']['html']);
        $data['content']['txt'] = $this->rel2abs("http://{$_SERVER['HTTP_HOST']}", $data['content']['txt']);

        return $data;
    }


    /**
     * rewrite relative link to absolute, ie when integration a remote source
     *
     * @param string $url absolute prefix of url
     * @param string $html text for changing
     * @return string changed text
     */
    function rel2abs($url, $html) {
        /*
        href="" ''
        no javascript
        src="" ''
        and href=\'index.php\'
        */
        $html = preg_replace("/href=[\"\'](?!JavaScript)(?!http)(?!mailto)(.*)[\"\']/i", "href=\"$url\\1\"", $html);
        $html = preg_replace("/src=[\"\'](?!JavaScript)(?!http)(.*)[\"\']/i", "src=\"$url\\1\"", $html);
        $html = preg_replace("/action=[\"\'](?!JavaScript)(?!http)(.*)[\"\']/i", "action=\"$url\\1\"", $html);
        //$abs_html = preg_replace( "/(?<!href=\")((http|ftp)+(s)?:\/\/[^<>\s]+)/i", "href=\"$url\\0\"", $html );
        return $html;
    }

    /**
     * deleteOldEmails
     *
     * @return integer|boolean number of deleted emails / false in case of failure
     */
    public function deleteOldEmails() {
        return $this->deleteEmailsOlderThan($this->conf['retention_days']);
    }

    /**
     * delete old emails to reduce amount of personal data stored
     *
     * @param int $days emails older than this number of days
     * @return integer|boolean number of deleted emails / false in case of failure
     */
    function deleteEmailsOlderThan($days) {
        if (!is_numeric($days)) return false;
        if ($days < 0) return false;

        $sql = "DELETE FROM common_email WHERE created < CURRENT_DATE - INTERVAL '$days days';";

        if ($result = $this->executeSql($sql)) {
            return count($result);
        } else {
            return false;
        }
    }
}
